Модели:

1) class Recipe (здесь будут данные о конкретном рецепте)

	Свойства (модификатор доступа public):
		RecipeId (int) - Id конкретного рецепта
		RecipeCategory (string) - Категория рецепта (суп, горячее, десерт, салат)
		RecipeName (string) - Название рецепта
		RecipeDescription (string) - Описание рецепта
		IsRecipeRemoved (int 1/0) - Свойство для определения, был ли рецепт удален
		ICollection<Mark> Marks - Все оценки, которые были выставлены рецепту

2) class Mark (данные об оценках рецептов. связь с рецептами "один ко многим". рецепту соответствует множество оценок разных пользователей)

	Свойства (модификатор доступа public):
		MarkId (int) - Id конкретной оценки
		RecipeId (int) - Id рецепта, которому выставлена оценка
		MarkValue (int) - Сама оценка (используем от 1 до 5)
		MarkAuthor (int) - User Id (id пользователя, который оставил оценку)
		* В нашем случае можем не брать UserId, а брать UserName, так как нам в лучшем случае понадобится
		только имя автора, выставившего оценку. Можно вообще исключить это свойство, так как в рамках наших задач
		это лишь дополнительная информация.

3) class User (данные по зареганым юзерам)

	Свойства (модификатор доступа public):
		UserId (int) - Id юзера
		UserName (string) - Имя юзера
		IsUserAdmin (int 1/0) - Является ли юзер админом
		IsUserRemoved (int 1/0) - Был ли юзер заблочен админом

4) class RecipeContext : DbContext (контекст данных для реализации Entity Framework)

	Свойства (модификатор доступа public):
		DbSet<Recipe> Recipes 
		DbSet<Mark> Marks

5) class UserContext : DbContext (контекст данных для реализации Entity Framework)

	Свойства (модификатор доступа public):
		DbSet<User> Users
		
6) для пагинации добавим следующие сущности:

   class PageInfo (описывает модель пагинации)
		
	Свойства (модификатор доступа public):
		PageNumber (int) - Номер текущей страницы
		PageSize (int) - Свойство определяет сколько объектов должно находиться на одной странице
		TotalItems (int) - Определяет, сколько всего объектов
		TotalPages (int) - Считает, сколько всего будет страниц (геттер возвращает целочисленное значение TotalItems/PageSize *используем Math.Ceiling)
		
   class IndexViewModel (модель для вывода данных в представление)
	
	Свойства (модификатор доступа public):
		IEnumerable<Recipe> Recipes - Определено для перебора нашиз
		PageInfo PageInfo - Модель пагинации



